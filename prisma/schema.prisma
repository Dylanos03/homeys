// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Post {
    id             Int      @id @default(autoincrement())
    authorId       String
    authorName     String
    authorImage    String
    author         Profile  @relation(fields: [authorId], references: [userId], onDelete: Cascade)
    name           String
    desc           String   @db.VarChar(1000)
    image          String?
    housePost      Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    userLocation   String   @default("Not Specified")
    userUniversity String   @default("Not Specified")
    likes          Like[]

    @@index([name])
    @@index([authorId])
}

model Like {
    id        Int      @id @default(autoincrement())
    userId    String
    postId    Int
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([postId])
}

model Profile {
    id               Int              @id @default(autoincrement())
    userId           String           @unique
    fullName         String
    username         String           @unique
    bio              String           @db.VarChar(1000)
    image            String
    interests        String           @db.VarChar(1000)
    location         String           @default("Not Specified")
    university       String           @default("Not Specified")
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    FriendReq        FriendReq[]      @relation("user")
    outFriendReq     FriendReq[]      @relation("friend")
    friends          Profile[]        @relation(name: "friend")
    friendOf         Profile[]        @relation(name: "friend")
    posts            Post[]
    Group            Group?           @relation(fields: [groupId], references: [id])
    groupId          Int?
    GroupReq         GroupReq[]       @relation("toUser")
    outGroupReq      GroupReq[]       @relation("fromUser")
    GroupMessages    GroupMessage[]   @relation("GroupMessageProfile")
    sentMessages     PrivateMessage[] @relation("FromMessages")
    receivedMessages PrivateMessage[] @relation("ToMessages")

    @@index([userId])
    @@index([groupId])
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Comment {
    id        Int      @id @default(autoincrement())
    userId    String
    postId    Int
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([text])
}

model FriendReq {
    id         Int      @id @default(autoincrement())
    userId     String
    user       Profile  @relation(name: "user", fields: [userId], references: [userId], onDelete: Cascade)
    friendId   String
    friend     Profile  @relation(name: "friend", fields: [friendId], references: [userId], onDelete: Cascade)
    friendName String
    friendPic  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([userId])
    @@index([friendId])
}

model Group {
    id        Int            @id @default(autoincrement())
    name      String
    members   Profile[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    GroupReq  GroupReq[]
    Messages  GroupMessage[]

    @@index([name])
}

model GroupReq {
    id         Int      @id @default(autoincrement())
    groupId    Int
    group      Group    @relation(fields: [groupId], references: [id])
    groupName  String
    senderName String
    userId     String
    senderId   String
    user       Profile  @relation(name: "toUser", fields: [userId], references: [userId], onDelete: Cascade)
    sender     Profile  @relation(name: "fromUser", fields: [senderId], references: [userId], onDelete: Cascade)
    createdAt  DateTime @default(now())

    @@index([groupId])
    @@index([userId])
    @@index([senderId])
}

model GroupMessage {
    id        Int      @id @default(autoincrement())
    user      Profile  @relation("GroupMessageProfile", fields: [userId], references: [userId], onDelete: Cascade)
    userId    String
    text      String   @db.VarChar(1000)
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   Int
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([groupId])
}

model PrivateMessage {
    id         Int      @id @default(autoincrement())
    fromUser   Profile  @relation("FromMessages", fields: [fromUserId], references: [userId], onDelete: Cascade)
    fromUserId String
    toUser     Profile  @relation("ToMessages", fields: [toUserId], references: [userId], onDelete: Cascade)
    toUserId   String
    text       String   @db.VarChar(1000)
    createdAt  DateTime @default(now())

    @@index([fromUserId])
    @@index([toUserId])
}
